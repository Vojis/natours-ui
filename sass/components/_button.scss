.btn {
  &, // this will translate to .btn (used for the <button> element)
  /* :link, :visited >> pseudo class, a special state of a selector  */
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* Inline block element is treated as if it was text
       This is why we used text-align: center in "text-box" class above
    */
    display: inline-block;
    border-radius: 10rem;
    font-size: $default-font-size;

    /* Transitions enable you to define the transition between two states
       of an element. States may be defined using pseudo-c;asses such as
       :hover or :active, or dynamically set using JS.
    */

    /* transform on the :hover and :active will be animated
       in relation to the initial state (transition).
       Transition should be set on the initial (parent) state
    */
    transition: all .2s;
    position: relative;

    // Change for the <button> element
    border: none;
    cursor: pointer;

  }

  &:hover {
    /* In CSS, Y-axis moves from top to bottom
       For this reason, if we want an item to go up, we give it negative value
    */
    transform: translateY(-.3rem);
    /* X Y blur color */
    box-shadow: 0 1rem 2rem rgba($color-black, .2);

    /* When we hover the button, we want certain styles to apply
       to the pseudo element
     */
    &::after {
      transform: scale(1.4, 1.6);
      /* opacity: 0 >> trick to fade an item out */
      opacity: 0;
    }
  }

  &:active,
  &:focus {
    outline: none;
    transform: translateY(-1px);
    box-shadow: 0 .5rem 1rem rgba($color-black, .2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  &--green {
    background-color: $color-primary;
    color: $color-white;

    &::after {
      background-color: $color-primary;
    }
  }

  &::after {
    /* content and display have to be specified */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: .4s;
  }

  &--animated {
    animation: moveInFromBottom .5s ease-out .75s;
    /* Automatically applies the styles up to 0% before the animation starts */
    animation-fill-mode: backwards;
  }
}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all .2s;
  }

  &:hover {
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black, .15);
    transform: translateY(-2px);
  }

  &:active {
    box-shadow: 0 .5rem 1rem rgba($color-black, .15);
    transform: translateY(0);
  }
}
